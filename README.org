* HELIX

[[https://travis-ci.com/vzaliva/helix][https://travis-ci.com/vzaliva/helix.svg?token=x87izvm44MdTPLHzuxzF&branch=master]]

HELIX project allows for the synthesis of high-performance
implementations of numerical algorithms by providing a certified
compiler for formally-specified DSL.  Based on the existing [[http://spiral.net/][SPIRAL]]
system, HELIX adds the rigor of formal verification of its correctness
using the Coq proof assistant. It formally defines a series of
domain-specific languages starting with HCOL, which represents a
computation data flow. HELIX works by transforming the original
program through a series of intermediate languages, culminating in
LLVM IR.

- HELIX focuses on automatic translation a class of mathematical.
  expressions to code.
- It works by revealing implicit iteration constructs and re-shaping
  them to match target platform parallelizm and vectorization
  capabilities.
- HELIX is rigorously defined and formally verified.
- HELIX is implemented in Coq proof assistant.
- It supports non-linear operators.
- Presently, HELIX uses SPIRAL as an optimization oracle, but it
  certifies its findings.
- LLVM is used machine code generation backend.
- Main application: Cyber-physical systems.

** Example

   An application of HELIX to a real-life situation of high-assurance
   vehicle control [[http://spiral.ece.cmu.edu:8080/pub-spiral/abstract.jsp?id=281][(paper)]] using a dynamic window vehicle control
   approach [[https://doi.org/10.1109/100.580977][(paper)â€‹]] is shown below:

   [[doc/bigpicture.png]]

** Dependencies

   - [[https://coq.inria.fr/][Coq]]
   - [[http://color.inria.fr/][CoLoR]]
   - [[https://github.com/coq-ext-lib/coq-ext-lib][ExtLib]]
   - [[https://github.com/math-classes/math-classes][math-classes]]
   - [[https://github.com/MetaCoq/metacoq][Template Coq]]
   - [[http://flocq.gforge.inria.fr/][Flocq]]
   - [[https://github.com/vellvm/vellvm][Vellvm]] (requires ~coq-ceres~, ~coq-ext-lib~, ~coq-paco~, and ~coq-flocq~) /(manual installation instructions below)/
   - [[https://opensource.janestreet.com/core/][Jane Street Core]]
   - coq-libhyps
   - [[https://github.com/Karmaki/coq-dpdgraph][coq-dpdgraph]] /(optional)/

 To install all required dependenceis:

#+BEGIN_SRC sh
     opam repo add coq-released https://coq.inria.fr/opam/released
     opam pin add coq 8.12.2
     make -j 4 install-deps
#+END_SRC

To install *optional* dependencies:

#+BEGIN_SRC sh
     opam install coq-dpdgraph
#+END_SRC

** Bulding and Running 
*** Install VELLVM dependency:

    You need to manually check out /master/ branch of VELLVM, compile,
    and symlink it as follows:

#+BEGIN_SRC sh
     ln -s path_to_vellvm_checkout/vellvm helix/lib
     ln -s path_to_vellvm_checkout/vellvm/src/ml/libvellvm helix/ml
#+END_SRC

*** Build:
    
#+BEGIN_SRC sh
     make
#+END_SRC
    
*** Run unit tests:

#+BEGIN_SRC sh
     make test
#+END_SRC

** Papers
    - [[https://kilthub.cmu.edu/ndownloader/files/26180729][HELIX: From Math to Verified Code (PhD thesis)]]
    - [[http://www.crocodile.org/lord/vzaliva-VSTTE20.pdf][Verified Translation Between Purely Functional and Imperative Domain Specific Languages in HELIX (VSTTE 20)]]
    - [[http://www.crocodile.org/lord/vzaliva-CoqPL19.pdf][Reification of shallow-embedded DSLs in Coq with automated verification (CoqPL 2019)]]
    - [[http://www.crocodile.org/lord/vzaliva-fhpc2018.pdf][HELIX: A Case Study of a Formal Verification of High Performance Program Generation (FHPC 2018)]]
    - [[http://www.crocodile.org/lord/Formal_Verification_of_HCOL_Rewriting_FMCAD15.pdf][Formal Verification of HCOL Rewriting (FMCAD 2015)]]
** How to cite
   Recommended citation:

#+BEGIN_SRC bibtex
   @phdthesis{zaliva2020helix,
     title  = {{HELIX}: From Math to Verified Code},
     author = {Zaliva, Vadim},
     year   = {2020},
     school = {Carnegie Mellon University}
   }
#+END_SRC

** Contact

   [[mailto:vzaliva@cmu.edu][Vadim Zaliva]]

